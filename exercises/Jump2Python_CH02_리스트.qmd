---
title: "Jump to Python CH02 - 리스트"
format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
    code-copy: true
    code-overflow: wrap
    fontsize: 1.1em
    mainfont: 'Pretendard, Noto Sans KR, Arial, sans-serif'
---

```{python}
# 모든 코드 줄의 결과를 자동 출력
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
```

# 리스트 자료형

리스트는 아무것도 포함하지 않아 비어 있을 수도 있고, 여러 개의 값을 포함할 수도 있다. 
숫자, 문자열, 또는 숫자와 문자열이 혼합된 형태로 포함될 수 있다.
또 리스트 자체를 다른 리스트 안에 포함할 수도 있다.

즉, 리스트는 어떤 자료형도 포함할 수 있다.

```{python}
odd = [1, 3, 5, 7, 9]
odd
```


```{python}
a = list() #빈 리스트 생성
a
```

## 리스트 인덱싱 


```{python}
a = [1, 2, 3, 4, 5]
a[0] # 첫 번째 요소
a[1] # 두 번째 요소
a[-1] # 마지막 요소

a[0] + a[1] # 첫 번째와 두 번째 요소의 합
```

```{python}
a = [1,2,3, ['a', 'b', 'c']]
a[0]
a[3]
a[-1]

a[-1][0] # 리스트 안의 리스트에서 첫 번째 요소
```


### 삼중 리스트에서 인덱싱 하기


```{python}
a = [1, 2, 3, ['a', 'b', 'c', ['d', 'e']]]
a[3][3][0] # 'd', 네 번째 요소의 네 번째 요소의 첫 번째 요소
```

## 리스트 슬라이싱

리스트 슬라이싱은 리스트에서 원하는 구간(여러 요소)을 잘라내어 새로운 리스트를 만드는 방법이다.

슬라이싱의 기본 문법은 `리스트[시작:끝]`이다. 여기서 '시작' 인덱스는 포함되고, '끝' 인덱스는 포함되지 않는다.

```{python}
a = [10, 20, 30, 40, 50]
a[1:4]   # 1번 인덱스부터 3번 인덱스까지 (20, 30, 40)
a[:3]    # 처음부터 2번 인덱스까지 (10, 20, 30)
a[2:]    # 2번 인덱스부터 끝까지 (30, 40, 50)
a[-3:-1] # 뒤에서 세 번째부터 뒤에서 두 번째까지 (30, 40)
```

### 인덱싱과 슬라이싱의 차이

- **인덱싱**은 리스트에서 하나의 요소(값)만을 선택할 때 사용한다. 예: `a[0]`, `a[-1]`
- **슬라이싱**은 리스트에서 여러 요소(구간)를 잘라내어 새로운 리스트를 만들 때 사용한다. 예: `a[1:4]`, `a[:3]`
- 인덱싱의 결과는 '값'이고, 슬라이싱의 결과는 '리스트'이다.

> **정리:**
> - 인덱싱: 하나의 값 선택 (`a[2]` → 30)

> - 슬라이싱: 여러 값(구간) 선택 (`a[1:4]` → [20, 30, 40])

### 중첩 슬라이싱


```{python}
a = [1, 2, 3, ['a', 'b', 'c', ['d', 'e']]]
a[3][3][0:2]  # ['d', 'e'], 네 번째 요소의 네 번째 요소에서 첫 번째와 두 번째 요소
```

## 리스트 연산 

### 더하기 

문자열에서 "abc" + "def"는 "abcdef"가 되듯이, 리스트에서도 두 리스트를 더하면 새로운 리스트가 만들어진다.

```{python}
a = [1, 2, 3]
b = [4, 5, 6]
c = a + b
c
```

### 반복

```{python}
a * 3 # a 리스트를 3번 반복
```

### 길이

```{python}
len(a) # a 리스트의 길이
```

## 리스트 수정과 삭제 

### 값 수정

```{python}
a[2] = 10 # a 리스트의 세 번째 요소를 10으로 수정
a
```

### del함수를 사용해 요소 삭제 

```{python}
del a[2] # a 리스트의 세 번째 요소를 삭제
a
```

## 리스트 관련 함수

### 리스트에 요소 추가 - append()

```{python}
a = [1, 2, 3]
a.append(4) # a 리스트에 4를 추가
a

a.append([5, 6]) # a 리스트에 [5, 6]을 추가
a
```

### 리스트 정렬 - sort()

```{python}
a = [3, 1, 4, 2]
a.sort() # a 리스트를 오름차순으로 정렬
a
b = ['banana', 'apple', 'cherry']
b.sort() # b 리스트를 알파벳 순으로 정렬
b
```

### 리스트 뒤집기 - reverse()

```{python}
a = [1, 2, 3, 4, 5]
a.reverse() # a 리스트를 뒤집기
a

b = ['apple', 'banana', 'cherry']
b.reverse() # b 리스트를 뒤집기
b
```

### 인덱스 반환 - index()

```{python}
a = [1, 2, 3, 4, 5]
a.index(3) # 3의 인덱스 반환 -> 2
a.index(1) # 1의 인덱스 반환 -> 0
#a.index(6) # 6은 리스트에 없으므로 오류 발생
```

### 요소 삽입 - insert()

```{python}
a = [1, 2, 3]
a.insert(1, 10) # 1번 인덱스에 10을 삽입
a
```

### 요소 제거 - remove()

remove(x)는 리스트에서 첫 번째로 나오는 x를 삭제하는 함수

```{python}
a = [1, 2, 3, 1, 2, 3]
a.remove(2) # 2를 제거, insert와 달리 함수의 인자가 Index가 아니라 값이다.
a
```

### 요소 끄집어 내기 - pop()

pop()은 리스트에서 마지막 요소를 제거하고 그 값을 반환하는 함수이다.

```{python}
a = [1, 2, 3]
a.pop() # 3을 제거하고 반환
a
```

### 요소 x의 개수 세기 - count()

count(x)는 리스트에서 x의 개수를 세는 함수이다.

```{python}
a = [1, 2, 3, 1, 2, 3]
a.count(1) # 1의 개수 세기
```

### 리스트 확장 - extend()

extend(iterable)는 리스트에 iterable의 모든 요소를 추가하는 함수이다.

```{python}
a = [1, 2, 3]
a.extend([4, 5])
a
# a + [4,5]와 동일함
```

